{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\quiz-app-master (2)\\\\quiz-app-master\\\\src\\\\components\\\\app\\\\App.js\";\nimport React from 'react';\nimport { backgroundImage } from '../../config.json';\nimport flagQuestion, { questions } from '../../flagQuestions.json';\nimport Quiz from '../quiz/Quiz';\nimport './App.css';\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  constructor(props) {\n    console.log(\"constructor app\");\n    super(props);\n\n    this.startTime = () => {\n      // this.setState({ isActive: true });\n      this.countdown = setInterval(() => {\n        this.setState(_ref => {\n          let {\n            secondsElapsed\n          } = _ref;\n          return {\n            secondsElapsed: secondsElapsed - 1\n          };\n        });\n      }, 1000);\n    };\n\n    this.resetTime = () => {\n      clearInterval(this.countdown);\n      this.setState({\n        secondsElapsed: 45 // isActive: false\n\n      });\n    };\n\n    this.pauseTime = () => {\n      // console.log(\"secondsElapsed: \",this.state.secondsElapsed % 60)\n      clearInterval(this.countdown); // this.setState({ isActive: false });\n    };\n\n    this.setPlayerName = e => {\n      this.setState({\n        playerName: e.target.value\n      });\n    };\n\n    this.handleDifficultyChange = e => {\n      this.setState({\n        difficulty: e.target.value\n      });\n    };\n\n    this.handleQuestionsAmountChange = e => {\n      this.setState({\n        amountOfQuestions: e.target.value\n      });\n    };\n\n    this.handleTypeChange = e => {\n      this.setState({\n        gameQuestionsType: e.target.value\n      });\n    };\n\n    this.handleNameSubmission = () => {\n      console.log(\"handleNameSubmission app\");\n      this.setState({\n        page: this.state.page + 1\n      });\n    };\n\n    this.handlePageNext = () => {\n      this.resetTime();\n      console.log(\"handlePageNext app\");\n      let min = 1;\n      let max = Number(flagQuestion.questions.length); //Maximum questions amount.\n\n      if (this.state.qNum < Number(this.state.amountOfQuestions) + 1) {\n        this.setState({\n          page: Number(Math.floor(Math.random() * (max - min) + min)),\n          qNum: this.state.qNum + 1\n        });\n      }\n    };\n\n    this.handleAnswerSubmission = (validAnswer, clueButtonPenalty, currentTime) => {\n      console.log(\"handleAnswerSubmission app\"); // A correct answer score is calculated based on the difficulty of the game\n      // and the time it took for the user to answer the question and will be rounded to have a round score.\n      // If the hint was used the score would be cut in half.\n\n      let currentScore = Math.round((10 * this.state.difficulty / 2 + currentTime) * clueButtonPenalty);\n\n      if (validAnswer) {\n        this.setState(prevState => ({\n          numCorrectAnswers: prevState.numCorrectAnswers + 1,\n          score: prevState.score += currentScore\n        }));\n      } else this.setState({\n        numIncorrectAnswers: this.state.numIncorrectAnswers + 1\n      });\n    };\n\n    this.reset = () => {\n      console.log(\"reset app\");\n      this.setState({\n        page: 0,\n        numCorrectAnswers: 0,\n        numIncorrectAnswers: 0,\n        qNum: 0,\n        score: 0\n      });\n    };\n\n    this.endGame = () => {\n      console.log(\"endGame app\");\n      this.setState({\n        page: -1,\n        numCorrectAnswers: 0,\n        numIncorrectAnswers: 0,\n        qNum: 0,\n        score: 0\n      });\n      axios.post('http://localhost:2000/logOut', {});\n    };\n\n    this.state = {\n      page: -1,\n      //Current question page.\n      numCorrectAnswers: 0,\n      numIncorrectAnswers: 0,\n      qNum: 0,\n      //Current question number.\n      score: 0,\n      //Current player score.\n      playerName: \"s\",\n      difficulty: \"3\",\n      amountOfQuestions: \"5\",\n      gameQuestionsType: \"country\",\n      // isActive: false,\n      secondsElapsed: 45 //time in seconds\n\n    };\n  } //Get the current second.\n\n\n  getSeconds() {\n    if (this.secondsElapsed >= 0) {\n      return (\"\" + this.secondsElapsed).slice(-2);\n    } else {\n      //Times is up, stop the timer by setting it to 0.\n      return \"0\";\n    }\n  } //Start the countdown timer.\n\n\n  render() {\n    // console.log(\"render app\")\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        backgroundImage: `url('${window.location.origin}/${backgroundImage}')`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Quiz, {\n      page: this.state.page,\n      qNum: this.state.qNum,\n      score: this.state.score,\n      playerName: this.state.playerName,\n      difficulty: this.state.difficulty,\n      amountOfQuestions: this.state.amountOfQuestions,\n      gameQuestionsType: this.state.gameQuestionsType,\n      numCorrectAnswers: this.state.numCorrectAnswers,\n      numIncorrectAnswers: this.state.numIncorrectAnswers,\n      handleAnswer: this.handleAnswer,\n      setPlayerName: this.setPlayerName,\n      handleDifficultyChange: this.handleDifficultyChange,\n      handleQuestionsAmountChange: this.handleQuestionsAmountChange,\n      handleTypeChange: this.handleTypeChange,\n      handlePageNext: this.handlePageNext,\n      handleAnswerSubmission: this.handleAnswerSubmission,\n      reset: this.reset,\n      endGame: this.endGame,\n      randomAnswers: this.createRandomAnswers,\n      handleNameSubmission: this.handleNameSubmission,\n      questions: questions // isActive={this.state.isActive}\n      ,\n      secondsElapsed: this.state.secondsElapsed,\n      startTime: this.startTime,\n      resetTime: this.resetTime,\n      pauseTime: this.pauseTime,\n      getSeconds: this.getSeconds,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Administrator/Downloads/quiz-app-master (2)/quiz-app-master/src/components/app/App.js"],"names":["React","backgroundImage","flagQuestion","questions","Quiz","axios","App","Component","constructor","props","console","log","startTime","countdown","setInterval","setState","secondsElapsed","resetTime","clearInterval","pauseTime","setPlayerName","e","playerName","target","value","handleDifficultyChange","difficulty","handleQuestionsAmountChange","amountOfQuestions","handleTypeChange","gameQuestionsType","handleNameSubmission","page","state","handlePageNext","min","max","Number","length","qNum","Math","floor","random","handleAnswerSubmission","validAnswer","clueButtonPenalty","currentTime","currentScore","round","prevState","numCorrectAnswers","score","numIncorrectAnswers","reset","endGame","post","getSeconds","slice","render","window","location","origin","handleAnswer","createRandomAnswers"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { backgroundImage } from '../../config.json';\nimport flagQuestion, {  questions } from '../../flagQuestions.json';\nimport Quiz from '../quiz/Quiz';\nimport './App.css';\nimport axios from \"axios\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    console.log(\"constructor app\")\n    super(props);\n    this.state = {\n      page: -1,//Current question page.\n      numCorrectAnswers: 0,\n      numIncorrectAnswers: 0,\n      qNum: 0,//Current question number.\n      score: 0,//Current player score.\n      playerName:\"s\",\n      difficulty:\"3\",\n      amountOfQuestions:\"5\",\n      gameQuestionsType:\"country\",\n\n      // isActive: false,\n      secondsElapsed: 45 //time in seconds\n\n    }\n  }\n\n//Get the current second.\n  getSeconds() {\n    if (this.secondsElapsed  >= 0) {\n      return ((\"\" + (this.secondsElapsed )).slice(-2));\n    }\n    else {//Times is up, stop the timer by setting it to 0.\n      return \"0\"\n    }\n  }\n  //Start the countdown timer.\n  startTime = () => {\n    // this.setState({ isActive: true });\n\n    this.countdown = setInterval(() => {\n      this.setState(({ secondsElapsed }) => ({\n        secondsElapsed: secondsElapsed - 1\n      }));\n    }, 1000);\n  };\n//Reset the countdown timer.\n  resetTime = () => {\n    clearInterval(this.countdown);\n    this.setState({\n      secondsElapsed: 45,\n      // isActive: false\n    });\n  };\n//Pause the countdown timer.\n  pauseTime = () => {\n    // console.log(\"secondsElapsed: \",this.state.secondsElapsed % 60)\n    clearInterval(this.countdown);\n    // this.setState({ isActive: false });\n  };\n\n  setPlayerName = (e) => {\n    this.setState({\n      playerName: e.target.value\n    }) ;\n  }\n  handleDifficultyChange=(e)=> {\n    this.setState({\n      difficulty : e.target.value,\n\n    })\n\n  }\n  handleQuestionsAmountChange=(e)=> {\n    this.setState({\n      amountOfQuestions : e.target.value\n    })\n  }\n  handleTypeChange=(e)=> {\n    this.setState({\n      gameQuestionsType:e.target.value\n    })\n  }\n  handleNameSubmission = () => {\n    console.log(\"handleNameSubmission app\")\n    this.setState({\n      page: this.state.page + 1\n    })\n  }\n  handlePageNext = () => {\n    this.resetTime()\n    console.log(\"handlePageNext app\")\n    let min = 1;\n    let max = Number(flagQuestion.questions.length)//Maximum questions amount.\n    if (this.state.qNum < Number (this.state.amountOfQuestions )+1) {\n      this.setState({\n        page: Number(Math.floor(Math.random() * (max - min) + min)),\n        qNum: this.state.qNum + 1\n      })\n    }\n  }\n\n  handleAnswerSubmission = (validAnswer,clueButtonPenalty,currentTime) => {\n    console.log(\"handleAnswerSubmission app\");\n    // A correct answer score is calculated based on the difficulty of the game\n    // and the time it took for the user to answer the question and will be rounded to have a round score.\n    // If the hint was used the score would be cut in half.\n    let currentScore = Math.round(((10 * this.state.difficulty / 2 ) + currentTime) * clueButtonPenalty)\n    if (validAnswer){\n      this.setState((prevState) => ({\n        numCorrectAnswers: prevState.numCorrectAnswers + 1,\n        score:prevState.score += currentScore\n      }));\n    }\n    else this.setState({ numIncorrectAnswers: this.state.numIncorrectAnswers + 1 })\n  }\n\n  reset = () => {\n    console.log(\"reset app\")\n    this.setState({\n      page: 0,\n      numCorrectAnswers: 0,\n      numIncorrectAnswers: 0,\n      qNum:0,\n      score:0,\n    });\n  }\n\n  endGame = () => {\n    console.log(\"endGame app\")\n    this.setState({\n      page: -1,\n      numCorrectAnswers: 0,\n      numIncorrectAnswers: 0,\n      qNum:0,\n      score:0\n    });\n    axios.post('http://localhost:2000/logOut', {})\n  }\n\n  render() {\n    // console.log(\"render app\")\n    return (\n        <div className=\"App\" style={{ backgroundImage: `url('${window.location.origin}/${backgroundImage}')`}}>\n          <Quiz\n              page={this.state.page}\n              qNum={this.state.qNum}\n              score={this.state.score}\n              playerName={this.state.playerName}\n              difficulty={this.state.difficulty}\n              amountOfQuestions={this.state.amountOfQuestions}\n              gameQuestionsType={this.state.gameQuestionsType}\n              numCorrectAnswers={this.state.numCorrectAnswers}\n              numIncorrectAnswers={this.state.numIncorrectAnswers}\n              handleAnswer={this.handleAnswer}\n              setPlayerName={this.setPlayerName}\n              handleDifficultyChange={this.handleDifficultyChange}\n              handleQuestionsAmountChange={this.handleQuestionsAmountChange}\n              handleTypeChange={this.handleTypeChange}\n              handlePageNext={this.handlePageNext}\n              handleAnswerSubmission={this.handleAnswerSubmission}\n              reset={this.reset}\n              endGame={this.endGame}\n              randomAnswers = {this.createRandomAnswers}\n              handleNameSubmission={this.handleNameSubmission}\n              questions={questions}\n\n              // isActive={this.state.isActive}\n              secondsElapsed={this.state.secondsElapsed}\n\n              startTime={this.startTime}\n              resetTime={this.resetTime}\n              pauseTime={this.pauseTime}\n              getSeconds={this.getSeconds}\n\n          />\n        </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}