{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\quiz-app-master (2)\\\\quiz-app-master\\\\src\\\\components\\\\quiz\\\\QuizQuestion\\\\QuizQuestion.js\";\nimport React from 'react';\nimport config from '../../../config.json';\nimport flagQuestion from '../../../flagQuestions.json';\nimport './QuizQuestion.css';\n\nclass QuizQuestion extends React.Component {\n  constructor(props) {\n    // console.log(\"constructor QuizQuestion\")\n    super(props);\n\n    this.setAnswer = e => {\n      // console.log(\"setAnswer\")\n      // let buttons = document.getElementsByClassName(\"answerButton\");//Get all answer buttons.\n      //Return all buttons to original color.\n      //Color the selected answer button.\n      if (!this.state.questionAnswered) {\n        for (let button of document.getElementsByClassName(\"answerButton\")) {\n          button.style.background = 'linear-gradient(to right, #eaeaea, #c5c4c4)';\n        }\n\n        e.target.style.background = 'linear-gradient(to right, #7FBCF9, #77a7d7)';\n      }\n\n      if (this.state.questionAnswered) {\n        e.target.style.border = \"3px solid #000\";\n      }\n\n      this.setState({\n        //Sets the selected answer.\n        selectedAnswer: e.target.innerHTML,\n        selectedAnswerIndex: e.target.name\n      });\n    };\n\n    this.colorSelectedAnswer = answerCorrect => {\n      // let correctAnswer=this.state.correctAnswer\n      // let buttons = document.getElementsByClassName(\"answerButton\");//Get all answer buttons.\n      for (let button of document.getElementsByClassName(\"answerButton\")) {\n        if (button.innerHTML === this.state.correctAnswer) {\n          //Paint the correct answer button.\n          button.style.background = 'linear-gradient(to right, #5ed285, #1b9b52)';\n        }\n\n        if (this.state.selectedAnswerIndex === button.name && !answerCorrect) {\n          //Paint the incorrect answer button.\n          button.style.background = 'linear-gradient(to right, #ed213a, #93291e)';\n        } // if(answerCorrect ==='null'){\n        //   //Return all buttons to original color.\n        //   for(button of buttons) {\n        //     button.style.backgroundColor = \"#eaeaea\";\n        //   }\n        // }\n        //  if(this.state.selectedAnswerIndex === button.name && answerCorrect) {\n        //   button.style.backgroundColor = \"#2ecc71\";\n        // }\n\n      }\n    };\n\n    this.handleAnswerSubmission = e => {\n      // console.log(\"handleAnswerSubmission\")\n      e.preventDefault();\n      let currentQuestion = flagQuestion.questions[this.props.page - 1][this.state.qType];\n      let currentTime = document.getElementById(\"timer\").innerHTML;\n      let answerCorrect;\n\n      if (this.state.selectedAnswer && this.state.selectedAnswer === currentQuestion) {\n        answerCorrect = true;\n        this.colorSelectedAnswer(answerCorrect);\n      } else if (this.state.selectedAnswer) {\n        answerCorrect = false;\n        this.colorSelectedAnswer(answerCorrect);\n      } else answerCorrect = null;\n\n      if (answerCorrect != null) {\n        this.props.pauseTime();\n      }\n\n      if (answerCorrect === null) this.setState({\n        showAnswerResponse: \"none\"\n      });else if (answerCorrect === true) this.setState({\n        showAnswerResponse: \"correct\"\n      });else this.setState({\n        showAnswerResponse: \"incorrect\"\n      });\n      this.setState({\n        submitButtonClicked: true,\n        questionAnswered: answerCorrect !== null,\n        answerCorrect\n      });\n\n      if (this.state.selectedAnswer && answerCorrect !== null) {\n        this.setState({\n          // currentPage: this.props.page,\n          submitButtonClicked: false,\n          selectedAnswer: null // answerCorrect: null\n\n        });\n        this.props.handleAnswerSubmission(answerCorrect, this.state.clueButtonPenalty, currentTime / 2);\n      }\n    };\n\n    this.renderAnswers = randomAnswers => {\n      // console.log(\"renderAnswers\")\n      return randomAnswers.map((answer, i) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col box\",\n          key: answer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\",\n          className: \"answerButton\",\n          name: `${i}`,\n          onClick: e => this.setAnswer(e) //(e,\"value\")\n          ,\n          id: `answerButton${i}` //Unique id for each button.\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }\n        }, answer));\n      });\n    };\n\n    this.renderAnswerResponseText = currentQuestion => {\n      if (this.state.showAnswerResponse === \"correct\") return /*#__PURE__*/React.createElement(\"p\", {\n        className: \"answerResponse\",\n        style: {\n          color: config.questionScoreCorrectColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 15\n        }\n      }, \"Correct!\");else if (this.state.showAnswerResponse === \"incorrect\") return /*#__PURE__*/React.createElement(\"p\", {\n        className: \"answerResponse\",\n        style: {\n          color: config.questionScoreIncorrectColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 15\n        }\n      }, \"Incorrect, the correct answer was:\", \" \", /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 138\n        }\n      }, currentQuestion));else if (this.state.showAnswerResponse === \"none\") return /*#__PURE__*/React.createElement(\"p\", {\n        className: \"answerResponse\",\n        style: {\n          color: config.questionScoreWarningColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 15\n        }\n      }, \"You forgot to choose an answer.\"); // else if (this.state.showAnswerResponse === \"time is up\")\n      //   return (<p className=\"answerResponse\" style={{ color: config.questionScoreIncorrectColor }}>{\"Time is up!, the correct answer was:\"} <strong>{currentQuestion}</strong></p>)\n      // else return (<div style={{ height: '43px' }}>\n      // </div>)\n    };\n\n    this.state = {\n      // currentPage: this.props.page,\n      qNum: this.props.qNum,\n      buttonColor: config.buttonColor,\n      answerButtonColor: config.answerButtonColor,\n      submitButtonClicked: false,\n      questionAnswered: false,\n      selectedAnswer: null,\n      // answerCorrect: null,\n      showAnswerResponse: null,\n      correctAnswer: null,\n      randomAnswers: [],\n      qType: this.props.gameQuestionsType,\n      clueButtonPenalty: 1,\n      timePenalty: 1\n    };\n  }\n\n  componentDidMount() {\n    // console.log(\"QuizQuestion componentDidMount\")\n    this.setState({\n      randomAnswers: this.createRandomAnswers(),\n      test: flagQuestion.questions[this.props.page - 1][this.state.qType]\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // console.log(\"componentDidUpdate QuizQuestion\")\n    let questionTime = document.getElementById(\"timer\");\n    questionTime.style.color = 'black';\n    questionTime.className = \"\";\n\n    if (prevProps.page !== this.props.page) {\n      this.setState({\n        questionAnswered: false,\n        showAnswerResponse: null,\n        randomAnswers: this.createRandomAnswers()\n      });\n    }\n\n    if (this.props.secondsElapsed <= 30) {\n      questionTime.style.color = 'orange';\n    }\n\n    if (this.props.secondsElapsed <= 15) {\n      questionTime.style.color = 'red';\n      questionTime.className = \"blink_me\";\n      questionTime.style.fontSize = \"large\";\n    } // if(this.props.secondsElapsed === 0) this.setState({ showAnswerResponse: \"time is up\"})\n    //  console.log(\"this.setState.showAnswerResponse: \",this.setState.showAnswerResponse)\n\n  }\n\n  getClue(e) {\n    e.target.disabled = true; //Disabled clue button.\n\n    let buttonsToDisabled = []; //The buttons that will be disabled.\n\n    let i = 0; //Index\n\n    let correctAnswer = this.state.correctAnswer; // console.log( \"correctAnswer: \"+ correctAnswer)\n\n    let answersButtons = Array.from(document.querySelectorAll('.answerButton')); //All answers buttons.\n\n    let answersButtonsWithoutCorrectAnswer = answersButtons.filter(function (f) {\n      return f.innerHTML !== correctAnswer;\n    }); //All answers buttons without the correctAnswer.\n\n    this.setState({\n      clueButtonPenalty: 0.5\n    }); //Choose random answers that will become non-clickable.\n\n    while (i < answersButtons.length / 2) {\n      //Half of the answers amount.\n      const random = Math.floor(Math.random() * Math.abs(answersButtons.length - 1)); //Random number in range (0,answersButtons.length-1).\n\n      if (buttonsToDisabled.indexOf(answersButtonsWithoutCorrectAnswer[random]) !== -1) {\n        //Avoid duplicate numbers.\n        continue;\n      }\n\n      buttonsToDisabled.push(answersButtonsWithoutCorrectAnswer[random]);\n      ++i;\n    } //Make those random answers to non-clickable.\n\n\n    i = 0;\n\n    while (i < buttonsToDisabled.length) {\n      buttonsToDisabled[i].disabled = true;\n      ++i;\n    }\n  }\n\n  createRandomAnswers() {\n    //Set the clue penalty.\n    this.setState({\n      clueButtonPenalty: 1\n    }); //Start countdown the time.\n\n    this.props.startTime(); //Return the clue button to enabled.\n\n    document.getElementById(\"clueButton\").disabled = false; // let buttons = document.getElementsByClassName(\"answerButton\");//Get all answer buttons.\n\n    let correctAnswer; // const answersArray = [];\n\n    const result = []; // let i = 0;\n    //Return all buttons to original color and enabled them.\n\n    for (let button of document.getElementsByClassName(\"answerButton\")) {\n      button.style.background = 'linear-gradient(to right, #eaeaea, #c5c4c4)';\n      button.disabled = false;\n    } // while(i < flagQuestion.questions.length){//\n    //   const random = Math.floor(Math.random() * flagQuestion.questions.length);\n    //\n    //   answersArray.push(flagQuestion.questions[random][this.state.qType]);\n    //\n    //\n    //   i++\n    // }\n    // i=0\n\n\n    correctAnswer = flagQuestion.questions[this.props.page - 1][this.state.qType];\n    this.setState({\n      correctAnswer: correctAnswer\n    });\n    result.push(correctAnswer);\n\n    do {\n      let random = Math.floor(Math.random() * flagQuestion.questions.length);\n\n      if (!result.includes(flagQuestion.questions[random][this.state.qType])) {\n        result.push(flagQuestion.questions[random][this.state.qType]); // console.log(i,\": \",answersArray[random])\n      } else if (result.includes(flagQuestion.questions[random] || result.includes(correctAnswer))) {// console.log(\"shit: \",answersArray[random])\n      }\n    } while (result.length < parseInt(this.props.difficulty) + 1);\n\n    result.sort(() => Math.random() - 0.5);\n    return result; // if(this.state.qType === \"Population\") {\n    //   answersArray.push(flagQuestion.populationAnswers[i])\n    //   correctAnswer = flagQuestion.questions[this.props.page - 1].population;\n    //   console.log(\"xxxxxxxxxxxxxxxxxxxx: \"+ correctAnswer.slice(2))\n    //   if(correctAnswer < 1000000){\n    //     correctAnswer = \"< 1000000\"\n    //   }\n    //   else if(correctAnswer < 2500000){\n    //     correctAnswer =\"< 2500000\"\n    //   }\n    //   else if(correctAnswer < 5000000){\n    //     correctAnswer =\"< 5000000\"\n    //   }\n    //   else if(correctAnswer < 10000000){\n    //     correctAnswer =\"< 10000000\"\n    //   }\n    //   else if(correctAnswer < 25000000){\n    //     correctAnswer =\"< 25000000\"\n    //   }\n    //   else if(correctAnswer < 50000000){\n    //     correctAnswer =\"< 50000000\"\n    //   }\n    //   else if(correctAnswer < 100000000){\n    //     correctAnswer =\"< 100000000\"\n    //   }\n    //   else if(correctAnswer > 100000000){\n    //     correctAnswer =\"100000000 +\"\n    //   }\n    //   console.log(\"yyyyyyyyyyyyyyyyyyy: \", correctAnswer)\n    // }\n    //   const random = Math.floor(Math.random() * answersArray.length);\n    //   if((result.indexOf(answersArray[random]) !== -1)\n    //       ||(answersArray[random]) === correctAnswer) {//Avoid duplicate answer.\n    //     continue;\n    //   }\n    //   result.push(answersArray[random]);\n    //   ++i;\n    // }\n    // if(this.state.qType !== \"Population\") {\n    //   result.push(correctAnswer);\n    //   result.sort(() => Math.random() - 0.5)\n    // }\n    // else if(this.state.qType === \"Population\") {\n    //   result.sort((a, b) => parseInt(a.slice(2)) - parseInt(b.slice(2)))\n    // }\n    // return result;\n  }\n\n  renderQuestionTypeField() {\n    let currentQuestion = flagQuestion.questions[this.props.page - 1];\n\n    if (this.state.qType === \"country\") {\n      return /*#__PURE__*/React.createElement(\"img\", {\n        className: \"questionImage\",\n        src: currentQuestion.img,\n        alt: `for question ${this.props.page - 1}`,\n        style: {\n          borderColor: config.containerAccentColor,\n          borderWidth: 2\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"capitalCityDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }\n      }, currentQuestion.country);\n    }\n  }\n\n  render() {\n    // console.log(\"render QuizQuestion\")\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }\n    }, config.title), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }\n    }, this.renderQuestionTypeField()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"timeHintQuestion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col px-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"timeAndAmount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 17\n      }\n    }, \"Time:\", /*#__PURE__*/React.createElement(\"p\", {\n      className: \"\",\n      id: \"timer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 19\n      }\n    }, \" \", this.props.getSeconds()))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col px-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      title: \"Clicking this button will delete half of the answers and half of the score.\",\n      className: \"getClueButton\",\n      id: \"clueButton\",\n      onClick: e => this.getClue(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 19\n      }\n    }, \"Hint\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col px-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"timeAndAmount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 17\n      }\n    }, \"Question\", /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 19\n      }\n    }, this.props.qNum, \" / \", Number(this.props.amountOfQuestions)))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questionFormWrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row row-cols-sm-2 mx-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 15\n      }\n    }, this.renderAnswers(this.state.randomAnswers))), !this.state.questionAnswered ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"questionSubmit\",\n      onClick: this.handleAnswerSubmission,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }\n    }, \"Submit\") : /*#__PURE__*/React.createElement(\"button\", {\n      className: \"questionSubmit\",\n      onClick: this.props.handlePageNext,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }\n    }, \"Next Question\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        height: 77\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 13\n      }\n    }, this.renderAnswerResponseText(flagQuestion.questions[this.props.page - 1][this.state.qType])), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"questionCurrentScore\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: config.questionScoreCorrectColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 15\n      }\n    }, this.props.numCorrectAnswers, \" correct\"), \" |\\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: config.questionScoreIncorrectColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 15\n      }\n    }, this.props.numIncorrectAnswers, \" incorrect\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 15\n      }\n    }, \"Your Score: \", this.props.score))));\n  }\n\n}\n\nexport default QuizQuestion;","map":{"version":3,"sources":["C:/Users/Administrator/Downloads/quiz-app-master (2)/quiz-app-master/src/components/quiz/QuizQuestion/QuizQuestion.js"],"names":["React","config","flagQuestion","QuizQuestion","Component","constructor","props","setAnswer","e","state","questionAnswered","button","document","getElementsByClassName","style","background","target","border","setState","selectedAnswer","innerHTML","selectedAnswerIndex","name","colorSelectedAnswer","answerCorrect","correctAnswer","handleAnswerSubmission","preventDefault","currentQuestion","questions","page","qType","currentTime","getElementById","pauseTime","showAnswerResponse","submitButtonClicked","clueButtonPenalty","renderAnswers","randomAnswers","map","answer","i","renderAnswerResponseText","color","questionScoreCorrectColor","questionScoreIncorrectColor","questionScoreWarningColor","qNum","buttonColor","answerButtonColor","gameQuestionsType","timePenalty","componentDidMount","createRandomAnswers","test","componentDidUpdate","prevProps","prevState","snapshot","questionTime","className","secondsElapsed","fontSize","getClue","disabled","buttonsToDisabled","answersButtons","Array","from","querySelectorAll","answersButtonsWithoutCorrectAnswer","filter","f","length","random","Math","floor","abs","indexOf","push","startTime","result","includes","parseInt","difficulty","sort","renderQuestionTypeField","img","borderColor","containerAccentColor","borderWidth","country","render","title","getSeconds","Number","amountOfQuestions","handlePageNext","height","numCorrectAnswers","numIncorrectAnswers","score"],"mappings":"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","sourcesContent":["import React from 'react';\nimport config from '../../../config.json';\nimport flagQuestion  from '../../../flagQuestions.json';\n\nimport './QuizQuestion.css';\n\n\nclass QuizQuestion extends React.Component {\n  constructor(props) {\n    // console.log(\"constructor QuizQuestion\")\n    super(props);\n    this.state = {\n\n      // currentPage: this.props.page,\n      qNum:this.props.qNum,\n      buttonColor: config.buttonColor,\n      answerButtonColor:config.answerButtonColor,\n\n      submitButtonClicked: false,\n      questionAnswered: false,\n      selectedAnswer: null,\n      // answerCorrect: null,\n      showAnswerResponse: null,\n\n      correctAnswer:null,\n\n      randomAnswers:[],\n      qType:this.props.gameQuestionsType,\n      clueButtonPenalty:1,\n      timePenalty:1\n\n    }\n\n  }\n\n\n\n  componentDidMount() {\n    // console.log(\"QuizQuestion componentDidMount\")\n\n    this.setState({\n      randomAnswers:this.createRandomAnswers(),\n      test:flagQuestion.questions[this.props.page - 1][this.state.qType]\n    })\n\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // console.log(\"componentDidUpdate QuizQuestion\")\n    let questionTime = document.getElementById(\"timer\")\n    questionTime.style.color='black'\n    questionTime.className=\"\"\n    if (prevProps.page !== this.props.page) {\n      this.setState({\n        questionAnswered: false,\n        showAnswerResponse: null,\n        randomAnswers:this.createRandomAnswers(),\n      })\n    }\n    if (this.props.secondsElapsed  <= 30) {\n      questionTime.style.color = 'orange';\n    }\n    if (this.props.secondsElapsed  <= 15) {\n      questionTime.style.color = 'red';\n      questionTime.className=\"blink_me\";\n      questionTime.style.fontSize = \"large\";\n    }\n\n    // if(this.props.secondsElapsed === 0) this.setState({ showAnswerResponse: \"time is up\"})\n    //  console.log(\"this.setState.showAnswerResponse: \",this.setState.showAnswerResponse)\n  }\n\n\n  getClue(e) {\n    e.target.disabled = true;//Disabled clue button.\n    let buttonsToDisabled = [];//The buttons that will be disabled.\n    let i = 0//Index\n    let correctAnswer = this.state.correctAnswer;\n    // console.log( \"correctAnswer: \"+ correctAnswer)\n\n    let answersButtons = Array.from(document.querySelectorAll('.answerButton'));//All answers buttons.\n    let answersButtonsWithoutCorrectAnswer = answersButtons.filter(function(f) { return f.innerHTML !== correctAnswer })//All answers buttons without the correctAnswer.\n\n    this.setState({clueButtonPenalty:0.5})\n\n    //Choose random answers that will become non-clickable.\n    while (i < answersButtons.length/2){//Half of the answers amount.\n      const random = Math.floor(Math.random() * Math.abs(answersButtons.length-1));//Random number in range (0,answersButtons.length-1).\n      if((buttonsToDisabled.indexOf(answersButtonsWithoutCorrectAnswer[random]) !== -1)) {//Avoid duplicate numbers.\n        continue;\n      }\n      buttonsToDisabled.push(answersButtonsWithoutCorrectAnswer[random]);\n      ++i;\n    }\n    //Make those random answers to non-clickable.\n    i = 0\n    while (i < buttonsToDisabled.length){\n      buttonsToDisabled[i].disabled = true;\n      ++i;\n    }\n  }\n\n  createRandomAnswers() {\n\n    //Set the clue penalty.\n    this.setState({clueButtonPenalty:1})\n    //Start countdown the time.\n    this.props.startTime()\n    //Return the clue button to enabled.\n    document.getElementById(\"clueButton\").disabled = false;\n\n    // let buttons = document.getElementsByClassName(\"answerButton\");//Get all answer buttons.\n    let correctAnswer;\n    // const answersArray = [];\n    const result = [];\n    // let i = 0;\n\n\n    //Return all buttons to original color and enabled them.\n    for(let button of document.getElementsByClassName(\"answerButton\")) {\n      button.style.background = 'linear-gradient(to right, #eaeaea, #c5c4c4)';\n      button.disabled = false;\n    }\n\n    // while(i < flagQuestion.questions.length){//\n    //   const random = Math.floor(Math.random() * flagQuestion.questions.length);\n    //\n    //   answersArray.push(flagQuestion.questions[random][this.state.qType]);\n    //\n    //\n    //   i++\n    // }\n\n    // i=0\n    correctAnswer = flagQuestion.questions[this.props.page - 1][this.state.qType];\n    this.setState({correctAnswer:correctAnswer})\n\n    result.push(correctAnswer);\n    do {\n\n      let random = Math.floor(Math.random() * flagQuestion.questions.length);\n\n      if (!result.includes(flagQuestion.questions[random][this.state.qType])) {\n        result.push(flagQuestion.questions[random][this.state.qType]);\n        // console.log(i,\": \",answersArray[random])\n      }\n      else if (result.includes(flagQuestion.questions[random] || result.includes(correctAnswer))) {\n        // console.log(\"shit: \",answersArray[random])\n\n      }\n    }\n    while (result.length < parseInt(this.props.difficulty)+1);\n    result.sort(() => Math.random() - 0.5)\n    return result;\n\n\n    // if(this.state.qType === \"Population\") {\n    //   answersArray.push(flagQuestion.populationAnswers[i])\n    //   correctAnswer = flagQuestion.questions[this.props.page - 1].population;\n    //   console.log(\"xxxxxxxxxxxxxxxxxxxx: \"+ correctAnswer.slice(2))\n    //   if(correctAnswer < 1000000){\n    //     correctAnswer = \"< 1000000\"\n    //   }\n    //   else if(correctAnswer < 2500000){\n    //     correctAnswer =\"< 2500000\"\n    //   }\n    //   else if(correctAnswer < 5000000){\n    //     correctAnswer =\"< 5000000\"\n    //   }\n    //   else if(correctAnswer < 10000000){\n    //     correctAnswer =\"< 10000000\"\n    //   }\n    //   else if(correctAnswer < 25000000){\n    //     correctAnswer =\"< 25000000\"\n    //   }\n    //   else if(correctAnswer < 50000000){\n    //     correctAnswer =\"< 50000000\"\n    //   }\n    //   else if(correctAnswer < 100000000){\n    //     correctAnswer =\"< 100000000\"\n    //   }\n    //   else if(correctAnswer > 100000000){\n    //     correctAnswer =\"100000000 +\"\n    //   }\n    //   console.log(\"yyyyyyyyyyyyyyyyyyy: \", correctAnswer)\n    // }\n    //   const random = Math.floor(Math.random() * answersArray.length);\n    //   if((result.indexOf(answersArray[random]) !== -1)\n    //       ||(answersArray[random]) === correctAnswer) {//Avoid duplicate answer.\n    //     continue;\n    //   }\n    //   result.push(answersArray[random]);\n    //   ++i;\n    // }\n\n\n    // if(this.state.qType !== \"Population\") {\n    //   result.push(correctAnswer);\n    //   result.sort(() => Math.random() - 0.5)\n    // }\n    // else if(this.state.qType === \"Population\") {\n    //   result.sort((a, b) => parseInt(a.slice(2)) - parseInt(b.slice(2)))\n    // }\n\n    // return result;\n  }\n\n  setAnswer = (e) => {\n    // console.log(\"setAnswer\")\n\n    // let buttons = document.getElementsByClassName(\"answerButton\");//Get all answer buttons.\n    //Return all buttons to original color.\n\n    //Color the selected answer button.\n    if(!this.state.questionAnswered){\n      for(let button of document.getElementsByClassName(\"answerButton\")) {\n        button.style.background = 'linear-gradient(to right, #eaeaea, #c5c4c4)';\n      }\n      e.target.style.background =  'linear-gradient(to right, #7FBCF9, #77a7d7)';\n\n    }\n    if(this.state.questionAnswered) {\n      e.target.style.border=\"3px solid #000\"\n    }\n\n    this.setState({//Sets the selected answer.\n      selectedAnswer: e.target.innerHTML,\n      selectedAnswerIndex:e.target.name\n    });\n  }\n\n  colorSelectedAnswer = (answerCorrect) => {\n    // let correctAnswer=this.state.correctAnswer\n    // let buttons = document.getElementsByClassName(\"answerButton\");//Get all answer buttons.\n\n    for(let button of document.getElementsByClassName(\"answerButton\")) {\n      if(button.innerHTML === this.state.correctAnswer ){//Paint the correct answer button.\n        button.style.background= 'linear-gradient(to right, #5ed285, #1b9b52)';\n      }\n      if(this.state.selectedAnswerIndex === button.name && !answerCorrect){//Paint the incorrect answer button.\n        button.style.background= 'linear-gradient(to right, #ed213a, #93291e)';\n      }\n      // if(answerCorrect ==='null'){\n      //   //Return all buttons to original color.\n      //   for(button of buttons) {\n      //     button.style.backgroundColor = \"#eaeaea\";\n      //   }\n      // }\n      //  if(this.state.selectedAnswerIndex === button.name && answerCorrect) {\n      //   button.style.backgroundColor = \"#2ecc71\";\n      // }\n    }\n  }\n  handleAnswerSubmission = (e) => {\n\n    // console.log(\"handleAnswerSubmission\")\n    e.preventDefault();\n\n    let currentQuestion = flagQuestion.questions[this.props.page - 1][this.state.qType]\n    let currentTime = (document.getElementById(\"timer\").innerHTML)\n\n    let answerCorrect;\n    if (this.state.selectedAnswer && (this.state.selectedAnswer) === (currentQuestion))\n    {\n      answerCorrect = true;\n      this.colorSelectedAnswer(answerCorrect)\n    }\n\n    else if (this.state.selectedAnswer)\n    {\n      answerCorrect = false;\n      this.colorSelectedAnswer(answerCorrect)\n    }\n    else answerCorrect = null;\n    if(answerCorrect != null){\n      this.props.pauseTime()\n    }\n\n    if (answerCorrect === null) this.setState({ showAnswerResponse: \"none\" })\n    else if (answerCorrect === true) this.setState({ showAnswerResponse: \"correct\" })\n    else this.setState({ showAnswerResponse: \"incorrect\"})\n\n\n    this.setState({\n      submitButtonClicked: true,\n      questionAnswered: answerCorrect !== null,\n      answerCorrect\n    });\n\n    if (this.state.selectedAnswer && answerCorrect !== null) {\n      this.setState({\n        // currentPage: this.props.page,\n        submitButtonClicked: false,\n        selectedAnswer: null,\n        // answerCorrect: null\n      });\n      this.props.handleAnswerSubmission(answerCorrect,this.state.clueButtonPenalty,(currentTime/2));\n    }\n\n  }\n\n  renderAnswers = (randomAnswers) => {\n    // console.log(\"renderAnswers\")\n\n    return randomAnswers.map((answer,i) => {\n\n      return (\n\n          <div className=\"col box\" key={answer} >\n            <button\n                type=\"button\"\n                className= \"answerButton\"\n                name={`${i}`}\n                onClick={e => this.setAnswer(e)}//(e,\"value\")\n                id={`answerButton${i}` }//Unique id for each button.\n            >\n              {answer}\n            </button>\n\n          </div>\n      )\n    })\n  }\n\n  renderAnswerResponseText = (currentQuestion) => {\n\n    if (this.state.showAnswerResponse === \"correct\")\n      return (<p className=\"answerResponse\" style={{ color: config.questionScoreCorrectColor }}>{\"Correct!\"}</p>)\n    else if (this.state.showAnswerResponse === \"incorrect\")\n      return (<p className=\"answerResponse\" style={{ color: config.questionScoreIncorrectColor }}>{\"Incorrect, the correct answer was:\"} <strong>{currentQuestion}</strong></p>)\n    else if (this.state.showAnswerResponse === \"none\")\n      return (<p className=\"answerResponse\" style={{ color: config.questionScoreWarningColor}}>{\"You forgot to choose an answer.\"}</p>)\n    // else if (this.state.showAnswerResponse === \"time is up\")\n    //   return (<p className=\"answerResponse\" style={{ color: config.questionScoreIncorrectColor }}>{\"Time is up!, the correct answer was:\"} <strong>{currentQuestion}</strong></p>)\n    // else return (<div style={{ height: '43px' }}>\n\n    // </div>)\n  }\n  renderQuestionTypeField() {\n    let currentQuestion = flagQuestion.questions[this.props.page - 1];\n    if(this.state.qType === \"country\") {\n      return(\n          <img\n              className=\"questionImage\"\n              src={currentQuestion.img} alt={`for question ${this.props.page - 1}`}\n              style={{ borderColor: config.containerAccentColor,\n                borderWidth: 2\n              }}\n          />)\n    }\n    else {\n      return (\n          <div className=\"capitalCityDiv\">\n            {currentQuestion.country}\n          </div>\n      );\n    }\n  }\n\n  render() {\n    // console.log(\"render QuizQuestion\")\n    return (\n        <div className=\"container\">\n          <h1>{config.title}</h1>\n          <div>\n            {this.renderQuestionTypeField()}{/* Render questions by type*/}\n          </div>\n          <div className= \"timeHintQuestion\">\n            <div className=\"row \">\n              <div className=\"col px-0\">\n                <div className=\"timeAndAmount\">\n                  Time:\n                  {/*<p>{\"60\"}</p>*/}\n\n                  <p className=\"\" id={\"timer\"}> {this.props.getSeconds()}</p>\n                  {/*<Timer/>*/}\n                </div>\n              </div>\n              <div className=\"col px-0\">\n                <div>\n                  <button\n                      title=\"Clicking this button will delete half of the answers and half of the score.\"\n                      className=\"getClueButton\"\n                      id = \"clueButton\"\n                      onClick={e=>this.getClue(e)}\n                  >\n                    {\"Hint\"}\n                  </button>\n                </div>\n\n              </div>\n\n              <div className=\"col px-0\">\n                <div className=\"timeAndAmount\">\n                  Question\n                  <p>{this.props.qNum} / {Number(this.props.amountOfQuestions)}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"questionFormWrap\">\n\n            {/*<form className=\"questionForm\" onSubmit={(e) => e.preventDefault()}>*/}\n            {/*  <fieldset className=\"questionFieldset\" >*/}\n            <div className=\"container\" >\n              <div className=\"row row-cols-sm-2 mx-5\">\n                {this.renderAnswers(this.state.randomAnswers)}\n              </div>\n            </div>\n\n            {!this.state.questionAnswered ?\n\n                <button\n                    className=\"questionSubmit\"\n                    onClick={this.handleAnswerSubmission}\n                >\n                  {\"Submit\"}\n                </button>\n                :\n                <button\n                    className=\"questionSubmit\"\n                    onClick={this.props.handlePageNext}\n                >\n                  {\"Next Question\"}\n                </button>\n            }\n\n            <div className=\"row\" style={{height: 77}}>\n              {this.renderAnswerResponseText(flagQuestion.questions[this.props.page - 1][this.state.qType])}\n            </div>\n\n            <p className=\"questionCurrentScore\">\n              <span style={{ color: config.questionScoreCorrectColor }}>{this.props.numCorrectAnswers} correct</span> |&nbsp;\n              <span style={{ color: config.questionScoreIncorrectColor }}>{this.props.numIncorrectAnswers} incorrect</span>\n              <br />\n              <span>Your Score: {this.props.score}</span>\n            </p>\n            {/*</fieldset>*/}\n\n            {/*</form>*/}\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default QuizQuestion;\n"]},"metadata":{},"sourceType":"module"}