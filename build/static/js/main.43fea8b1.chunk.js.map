{"version":3,"sources":["components/quiz/QuizEntry/QuizEntry.js","components/quiz/QuizQuestion/QuizQuestion.js","components/quiz/HighScoreTable/HighScoreTable.js","components/quiz/QuizFinish/QuizFinish.js","components/quiz/Menus/MainMenu.js","components/quiz/Quiz.js","components/app/App.js","serviceWorker.js","index.js"],"names":["QuizEntry","prevProps","prevState","snapshot","console","log","document","getElementsByClassName","disabled","this","props","difficulty","gameQuestionsType","react_default","a","createElement","config","title","className","src","concat","window","location","origin","quizLogo","alt","playerName","id","defaultValue","onChange","handleDifficultyChange","value","amountOfQuestions","handleQuestionsAmountChange","handleTypeChange","onClick","handlePageNext","React","Component","QuizQuestion","_this","Object","classCallCheck","_super","call","setAnswer","e","state","questionAnswered","_step","_iterator","createForOfIteratorHelper","s","n","done","style","background","err","f","target","border","setState","selectedAnswer","innerHTML","selectedAnswerIndex","name","colorSelectedAnswer","answerCorrect","_step2","_iterator2","button","correctAnswer","handleAnswerSubmission","preventDefault","currentQuestion","flagQuestion","questions","page","qType","currentTime","getElementById","pauseTime","showAnswerResponse","submitButtonClicked","clueButtonPenalty","renderAnswers","randomAnswers","map","answer","i","key","type","renderAnswerResponseText","color","questionScoreCorrectColor","questionScoreIncorrectColor","questionScoreWarningColor","qNum","buttonColor","answerButtonColor","timePenalty","createRandomAnswers","test","questionTime","secondsElapsed","fontSize","buttonsToDisabled","answersButtons","Array","from","querySelectorAll","answersButtonsWithoutCorrectAnswer","filter","length","random","Math","floor","abs","indexOf","push","startTime","_step3","result","_iterator3","includes","parseInt","sort","img","borderColor","containerAccentColor","borderWidth","country","_this2","renderQuestionTypeField","getSeconds","getClue","Number","height","numCorrectAnswers","numIncorrectAnswers","score","HighScoreTable","obj","username","date","QuizFinish","paginate","usersCollection","axios","get","then","res","data","catch","error","setTimeout","quiz_HighScoreTable_HighScoreTable","dataTable","perfectGif","ButtonGroup","variant","aria-label","reset","endGame","require","MainMenu","register","post","handleNameSubmission","response","errorMessage","swal","dangerMode","text","icon","titleColor","margin","setPlayerName","placeholder","Quiz","renderQuizDisplay","quiz_Menus_MainMenu","quiz_QuizEntry_QuizEntry","quiz_QuizQuestion_QuizQuestion","handleAnswer","resetTime","quiz_QuizFinish_QuizFinish","backgroundImage","App","countdown","setInterval","_ref","clearInterval","max","validAnswer","currentScore","round","slice","components_quiz_Quiz","Boolean","hostname","match","ReactDOM","render","components_app_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43fea8b1.chunk.js","sourcesContent":["import React from 'react';\nimport config from '../../../config.json';\nimport './QuizEntry.css';\nimport 'react-bootstrap';\n\nclass QuizEntry extends React.Component {\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log(\"componentDidUpdate QuizEntry\")\n        //Cannot be played when the type of question is religion and the difficulty is hard.\n        document.getElementsByClassName(\"form-select\")[2][2].disabled = this.props.difficulty === \"7\";\n        document.getElementsByClassName(\"form-select\")[0][2].disabled = this.props.gameQuestionsType === \"religion\";\n    }\n    render() {\n        console.log(\"render quizEntry\")\n\n        return (\n            <div>\n                <h1>{config.title}</h1>\n                <img className=\"quizLogo\" src={`${window.location.origin}/${config.quizLogo}`} alt={`${config.title} logo`} />\n                <h2> Hi, {this.props.playerName}</h2>\n                <div className=\"dropdownContainer\">\n                    {/*onSubmit={this.handleSubmit}*/}\n                    <div className=\"dropdown row\">\n                        <div className=\"col-8\" id={\"NumOfQuestionsText\"}>\n                            <label>Difficulty:</label>\n                        </div>\n                        <div className=\"col-4\">\n                            {/*<div className=\"dropdown-content\">*/}\n                            <select className=\"form-select\" defaultValue={this.props.difficulty} onChange={this.props.handleDifficultyChange}>\n                                <option value=\"3\">Easy</option>\n                                <option value=\"5\">Normal</option>\n                                <option value=\"7\">Hard</option>\n                            </select>\n\n                            {/*</div>*/}\n                        </div>\n                    </div>\n                    <div className=\"dropdown row\">\n                        <div className=\"col-8\" id={\"NumOfQuestionsText\"}>\n                            <label>Amount Of Questions:</label>\n                        </div>\n                        <div className=\"col-4\">\n                            {/*<div className=\"dropdown-content\">*/}\n                            <select  className=\"form-select\" defaultValue={this.props.amountOfQuestions} onChange={this.props.handleQuestionsAmountChange}>\n                                <option value=\"5\">5</option>\n                                <option value=\"10\">10</option>\n                                <option value=\"25\">25</option>\n                                <option value=\"50\">50</option>\n                            </select>\n\n                            {/*</div>*/}\n                        </div>\n                    </div>\n\n                    <div className=\"dropdown row\">\n                        <div className=\"col-8\" id={\"NumOfQuestionsText\"}>\n                            <label>Questions Type:</label>\n                        </div>\n                        <div className=\"col-4\">\n                            {/*<div className=\"dropdown-content\">*/}\n\n                            <select className=\"form-select\" defaultValue={this.props.gameQuestionsType} onChange={this.props.handleTypeChange}>\n                                <option value=\"country\">Flags</option>\n                                <option value=\"city\">Capital Cities</option>\n                                <option value=\"religion\">Religion</option>\n                                <option value=\"language\">Language</option>\n                                {/*<option value=\"Population\">Population</option>*/}\n                            </select>\n\n                            {/*</div>*/}\n                        </div>\n                    </div>\n                </div>\n\n\n                <button\n                    className=\"rainbow rainbow-1\"\n                    onClick={this.props.handlePageNext}\n                >\n                    {\"Get Started\"}\n                </button>\n\n            </div>\n        )\n    }\n}\n\nexport default QuizEntry;\n","import React from 'react';\nimport config from '../../../config.json';\nimport flagQuestion  from '../../../flagQuestions.json';\n\nimport './QuizQuestion.css';\n\n\nclass QuizQuestion extends React.Component {\n  constructor(props) {\n    // console.log(\"constructor QuizQuestion\")\n    super(props);\n    this.state = {\n\n      // currentPage: this.props.page,\n      qNum:this.props.qNum,\n      buttonColor: config.buttonColor,\n      answerButtonColor:config.answerButtonColor,\n\n      submitButtonClicked: false,\n      questionAnswered: false,\n      selectedAnswer: null,\n      // answerCorrect: null,\n      showAnswerResponse: null,\n\n      correctAnswer:null,\n\n      randomAnswers:[],\n      qType:this.props.gameQuestionsType,\n      clueButtonPenalty:1,\n      timePenalty:1\n\n    }\n\n  }\n\n\n\n  componentDidMount() {\n    // console.log(\"QuizQuestion componentDidMount\")\n\n    this.setState({\n      randomAnswers:this.createRandomAnswers(),\n      test:flagQuestion.questions[this.props.page - 1][this.state.qType]\n    })\n\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // console.log(\"componentDidUpdate QuizQuestion\")\n    let questionTime = document.getElementById(\"timer\")\n    questionTime.style.color='black'\n    questionTime.className=\"\"\n    if (prevProps.page !== this.props.page) {\n      this.setState({\n        questionAnswered: false,\n        showAnswerResponse: null,\n        randomAnswers:this.createRandomAnswers(),\n      })\n    }\n    if (this.props.secondsElapsed  <= 30) {\n      questionTime.style.color = 'orange';\n    }\n    if (this.props.secondsElapsed  <= 15) {\n      questionTime.style.color = 'red';\n      questionTime.className=\"blink_me\";\n      questionTime.style.fontSize = \"large\";\n    }\n\n    // if(this.props.secondsElapsed === 0) this.setState({ showAnswerResponse: \"time is up\"})\n    //  console.log(\"this.setState.showAnswerResponse: \",this.setState.showAnswerResponse)\n  }\n\n\n  getClue(e) {\n    e.target.disabled = true;//Disabled clue button.\n    let buttonsToDisabled = [];//The buttons that will be disabled.\n    let i = 0//Index\n    let correctAnswer = this.state.correctAnswer;\n    // console.log( \"correctAnswer: \"+ correctAnswer)\n\n    let answersButtons = Array.from(document.querySelectorAll('.answerButton'));//All answers buttons.\n    let answersButtonsWithoutCorrectAnswer = answersButtons.filter(function(f) { return f.innerHTML !== correctAnswer })//All answers buttons without the correctAnswer.\n\n    this.setState({clueButtonPenalty:0.5})\n\n    //Choose random answers that will become non-clickable.\n    while (i < answersButtons.length/2){//Half of the answers amount.\n      const random = Math.floor(Math.random() * Math.abs(answersButtons.length-1));//Random number in range (0,answersButtons.length-1).\n      if((buttonsToDisabled.indexOf(answersButtonsWithoutCorrectAnswer[random]) !== -1)) {//Avoid duplicate numbers.\n        continue;\n      }\n      buttonsToDisabled.push(answersButtonsWithoutCorrectAnswer[random]);\n      ++i;\n    }\n    //Make those random answers to non-clickable.\n    i = 0\n    while (i < buttonsToDisabled.length){\n      buttonsToDisabled[i].disabled = true;\n      ++i;\n    }\n  }\n\n  createRandomAnswers() {\n\n    //Set the clue penalty.\n    this.setState({clueButtonPenalty:1})\n    //Start countdown the time.\n    this.props.startTime()\n    //Return the clue button to enabled.\n    document.getElementById(\"clueButton\").disabled = false;\n\n    // let buttons = document.getElementsByClassName(\"answerButton\");//Get all answer buttons.\n    let correctAnswer;\n    // const answersArray = [];\n    const result = [];\n    // let i = 0;\n\n\n    //Return all buttons to original color and enabled them.\n    for(let button of document.getElementsByClassName(\"answerButton\")) {\n      button.style.background = 'linear-gradient(to right, #eaeaea, #c5c4c4)';\n      button.disabled = false;\n    }\n\n    // while(i < flagQuestion.questions.length){//\n    //   const random = Math.floor(Math.random() * flagQuestion.questions.length);\n    //\n    //   answersArray.push(flagQuestion.questions[random][this.state.qType]);\n    //\n    //\n    //   i++\n    // }\n\n    // i=0\n    correctAnswer = flagQuestion.questions[this.props.page - 1][this.state.qType];\n    this.setState({correctAnswer:correctAnswer})\n\n    result.push(correctAnswer);\n    do {\n\n      let random = Math.floor(Math.random() * flagQuestion.questions.length);\n\n      if (!result.includes(flagQuestion.questions[random][this.state.qType])) {\n        result.push(flagQuestion.questions[random][this.state.qType]);\n        // console.log(i,\": \",answersArray[random])\n      }\n      else if (result.includes(flagQuestion.questions[random] || result.includes(correctAnswer))) {\n        // console.log(\"shit: \",answersArray[random])\n\n      }\n    }\n    while (result.length < parseInt(this.props.difficulty)+1);\n    result.sort(() => Math.random() - 0.5)\n    return result;\n\n\n    // if(this.state.qType === \"Population\") {\n    //   answersArray.push(flagQuestion.populationAnswers[i])\n    //   correctAnswer = flagQuestion.questions[this.props.page - 1].population;\n    //   console.log(\"xxxxxxxxxxxxxxxxxxxx: \"+ correctAnswer.slice(2))\n    //   if(correctAnswer < 1000000){\n    //     correctAnswer = \"< 1000000\"\n    //   }\n    //   else if(correctAnswer < 2500000){\n    //     correctAnswer =\"< 2500000\"\n    //   }\n    //   else if(correctAnswer < 5000000){\n    //     correctAnswer =\"< 5000000\"\n    //   }\n    //   else if(correctAnswer < 10000000){\n    //     correctAnswer =\"< 10000000\"\n    //   }\n    //   else if(correctAnswer < 25000000){\n    //     correctAnswer =\"< 25000000\"\n    //   }\n    //   else if(correctAnswer < 50000000){\n    //     correctAnswer =\"< 50000000\"\n    //   }\n    //   else if(correctAnswer < 100000000){\n    //     correctAnswer =\"< 100000000\"\n    //   }\n    //   else if(correctAnswer > 100000000){\n    //     correctAnswer =\"100000000 +\"\n    //   }\n    //   console.log(\"yyyyyyyyyyyyyyyyyyy: \", correctAnswer)\n    // }\n    //   const random = Math.floor(Math.random() * answersArray.length);\n    //   if((result.indexOf(answersArray[random]) !== -1)\n    //       ||(answersArray[random]) === correctAnswer) {//Avoid duplicate answer.\n    //     continue;\n    //   }\n    //   result.push(answersArray[random]);\n    //   ++i;\n    // }\n\n\n    // if(this.state.qType !== \"Population\") {\n    //   result.push(correctAnswer);\n    //   result.sort(() => Math.random() - 0.5)\n    // }\n    // else if(this.state.qType === \"Population\") {\n    //   result.sort((a, b) => parseInt(a.slice(2)) - parseInt(b.slice(2)))\n    // }\n\n    // return result;\n  }\n\n  setAnswer = (e) => {\n    // console.log(\"setAnswer\")\n\n    // let buttons = document.getElementsByClassName(\"answerButton\");//Get all answer buttons.\n    //Return all buttons to original color.\n\n    //Color the selected answer button.\n    if(!this.state.questionAnswered){\n      for(let button of document.getElementsByClassName(\"answerButton\")) {\n        button.style.background = 'linear-gradient(to right, #eaeaea, #c5c4c4)';\n      }\n      e.target.style.background =  'linear-gradient(to right, #7FBCF9, #77a7d7)';\n\n    }\n    if(this.state.questionAnswered) {\n      e.target.style.border=\"3px solid #000\"\n    }\n\n    this.setState({//Sets the selected answer.\n      selectedAnswer: e.target.innerHTML,\n      selectedAnswerIndex:e.target.name\n    });\n  }\n\n  colorSelectedAnswer = (answerCorrect) => {\n    // let correctAnswer=this.state.correctAnswer\n    // let buttons = document.getElementsByClassName(\"answerButton\");//Get all answer buttons.\n\n    for(let button of document.getElementsByClassName(\"answerButton\")) {\n      if(button.innerHTML === this.state.correctAnswer ){//Paint the correct answer button.\n        button.style.background= 'linear-gradient(to right, #5ed285, #1b9b52)';\n      }\n      if(this.state.selectedAnswerIndex === button.name && !answerCorrect){//Paint the incorrect answer button.\n        button.style.background= 'linear-gradient(to right, #ed213a, #93291e)';\n      }\n      // if(answerCorrect ==='null'){\n      //   //Return all buttons to original color.\n      //   for(button of buttons) {\n      //     button.style.backgroundColor = \"#eaeaea\";\n      //   }\n      // }\n      //  if(this.state.selectedAnswerIndex === button.name && answerCorrect) {\n      //   button.style.backgroundColor = \"#2ecc71\";\n      // }\n    }\n  }\n  handleAnswerSubmission = (e) => {\n\n    // console.log(\"handleAnswerSubmission\")\n    e.preventDefault();\n\n    let currentQuestion = flagQuestion.questions[this.props.page - 1][this.state.qType]\n    let currentTime = (document.getElementById(\"timer\").innerHTML)\n\n    let answerCorrect;\n    if (this.state.selectedAnswer && (this.state.selectedAnswer) === (currentQuestion))\n    {\n      answerCorrect = true;\n      this.colorSelectedAnswer(answerCorrect)\n    }\n\n    else if (this.state.selectedAnswer)\n    {\n      answerCorrect = false;\n      this.colorSelectedAnswer(answerCorrect)\n    }\n    else answerCorrect = null;\n    if(answerCorrect != null){\n      this.props.pauseTime()\n    }\n\n    if (answerCorrect === null) this.setState({ showAnswerResponse: \"none\" })\n    else if (answerCorrect === true) this.setState({ showAnswerResponse: \"correct\" })\n    else this.setState({ showAnswerResponse: \"incorrect\"})\n\n\n    this.setState({\n      submitButtonClicked: true,\n      questionAnswered: answerCorrect !== null,\n      answerCorrect\n    });\n\n    if (this.state.selectedAnswer && answerCorrect !== null) {\n      this.setState({\n        // currentPage: this.props.page,\n        submitButtonClicked: false,\n        selectedAnswer: null,\n        // answerCorrect: null\n      });\n      this.props.handleAnswerSubmission(answerCorrect,this.state.clueButtonPenalty,(currentTime/2));\n    }\n\n  }\n\n  renderAnswers = (randomAnswers) => {\n    // console.log(\"renderAnswers\")\n\n    return randomAnswers.map((answer,i) => {\n\n      return (\n\n          <div className=\"col box\" key={answer} >\n            <button\n                type=\"button\"\n                className= \"answerButton\"\n                name={`${i}`}\n                onClick={e => this.setAnswer(e)}//(e,\"value\")\n                id={`answerButton${i}` }//Unique id for each button.\n            >\n              {answer}\n            </button>\n\n          </div>\n      )\n    })\n  }\n\n  renderAnswerResponseText = (currentQuestion) => {\n\n    if (this.state.showAnswerResponse === \"correct\")\n      return (<p className=\"answerResponse\" style={{ color: config.questionScoreCorrectColor }}>{\"Correct!\"}</p>)\n    else if (this.state.showAnswerResponse === \"incorrect\")\n      return (<p className=\"answerResponse\" style={{ color: config.questionScoreIncorrectColor }}>{\"Incorrect, the correct answer was:\"} <strong>{currentQuestion}</strong></p>)\n    else if (this.state.showAnswerResponse === \"none\")\n      return (<p className=\"answerResponse\" style={{ color: config.questionScoreWarningColor}}>{\"You forgot to choose an answer.\"}</p>)\n    // else if (this.state.showAnswerResponse === \"time is up\")\n    //   return (<p className=\"answerResponse\" style={{ color: config.questionScoreIncorrectColor }}>{\"Time is up!, the correct answer was:\"} <strong>{currentQuestion}</strong></p>)\n    // else return (<div style={{ height: '43px' }}>\n\n    // </div>)\n  }\n  renderQuestionTypeField() {\n    let currentQuestion = flagQuestion.questions[this.props.page - 1];\n    if(this.state.qType === \"country\") {\n      return(\n          <img\n              className=\"questionImage\"\n              src={currentQuestion.img} alt={`for question ${this.props.page - 1}`}\n              style={{ borderColor: config.containerAccentColor,\n                borderWidth: 2\n              }}\n          />)\n    }\n    else {\n      return (\n          <div className=\"capitalCityDiv\">\n            {currentQuestion.country}\n          </div>\n      );\n    }\n  }\n\n  render() {\n    // console.log(\"render QuizQuestion\")\n    return (\n        <div className=\"container\">\n          <h1>{config.title}</h1>\n          <div>\n            {this.renderQuestionTypeField()}{/* Render questions by type*/}\n          </div>\n          <div className= \"timeHintQuestion\">\n            <div className=\"row \">\n              <div className=\"col px-0\">\n                <div className=\"timeAndAmount\">\n                  Time:\n                  {/*<p>{\"60\"}</p>*/}\n\n                  <p className=\"\" id={\"timer\"}> {this.props.getSeconds()}</p>\n                  {/*<Timer/>*/}\n                </div>\n              </div>\n              <div className=\"col px-0\">\n                <div>\n                  <button\n                      title=\"Clicking this button will delete half of the answers and half of the score.\"\n                      className=\"getClueButton\"\n                      id = \"clueButton\"\n                      onClick={e=>this.getClue(e)}\n                  >\n                    {\"Hint\"}\n                  </button>\n                </div>\n\n              </div>\n\n              <div className=\"col px-0\">\n                <div className=\"timeAndAmount\">\n                  Question\n                  <p>{this.props.qNum} / {Number(this.props.amountOfQuestions)}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"questionFormWrap\">\n\n            {/*<form className=\"questionForm\" onSubmit={(e) => e.preventDefault()}>*/}\n            {/*  <fieldset className=\"questionFieldset\" >*/}\n            <div className=\"container\" >\n              <div className=\"row row-cols-sm-2 mx-5\">\n                {this.renderAnswers(this.state.randomAnswers)}\n              </div>\n            </div>\n\n            {!this.state.questionAnswered ?\n\n                <button\n                    className=\"questionSubmit\"\n                    onClick={this.handleAnswerSubmission}\n                >\n                  {\"Submit\"}\n                </button>\n                :\n                <button\n                    className=\"questionSubmit\"\n                    onClick={this.props.handlePageNext}\n                >\n                  {\"Next Question\"}\n                </button>\n            }\n\n            <div className=\"row\" style={{height: 77}}>\n              {this.renderAnswerResponseText(flagQuestion.questions[this.props.page - 1][this.state.qType])}\n            </div>\n\n            <p className=\"questionCurrentScore\">\n              <span style={{ color: config.questionScoreCorrectColor }}>{this.props.numCorrectAnswers} correct</span> |&nbsp;\n              <span style={{ color: config.questionScoreIncorrectColor }}>{this.props.numIncorrectAnswers} incorrect</span>\n              <br />\n              <span>Your Score: {this.props.score}</span>\n            </p>\n            {/*</fieldset>*/}\n\n            {/*</form>*/}\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default QuizQuestion;\n","import React from 'react';\r\n\r\nclass HighScoreTable extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td> </td>\r\n                <td> {this.props.obj.username} </td>\r\n                {/*<td>*/}\r\n                {/*    {this.props.obj.loggedIn.toString()}*/}\r\n                {/*</td>*/}\r\n                <td> {this.props.obj.score} </td>\r\n                <td> {this.props.obj.date} </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\nexport default HighScoreTable;\r\n","import React from 'react';\nimport config from '../../../config.json';\nimport './QuizFinish.css';\nimport {ButtonGroup} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport HighScoreTable from '../HighScoreTable/HighScoreTable'\n\n\n\nclass QuizFinish extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttonColor: config.buttonColor,\n            paginate: 5,\n            usersCollection:[],\n\n\n        }\n        axios.get('http://localhost:2000/saveScore/' + this.props.score + '/' + this.props.playerName)\n            .then(res => {\n                console.log(\"saveScore\")\n                this.setState({ score: res.data });\n                this.setState({ usersCollection: res.data });\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    componentDidMount() {\n        //setTimeout gives time for the score to be updated.\n        setTimeout(() => {\n            axios.get('http://localhost:2000/showAll')\n                .then(res => {\n\n                    this.setState({ usersCollection: res.data });\n                })\n                .catch(function (error) {\n                    console.log(error);\n                })\n        }, 500);\n    }\n    //   buttonMouseOver = () => {\n    //   this.setState({\n    //     buttonColor: config.buttonHoverColor\n    //   })\n    // }\n    //\n    // buttonMouseOut = () => {\n    //   this.setState({\n    //     buttonColor: config.buttonColor\n    //   })\n    // }\n\n\n    dataTable() {\n        return this.state.usersCollection.map((data, i) => {\n            return <HighScoreTable obj={data} key={i} />;\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{config.title}</h1>\n                <img className=\"resultsLogo\" src={`${window.location.origin}/${config.quizLogo}`} alt={`${config.title} logo`}/>\n                <h2 className=\"resultsHeader\">{\"Leaderboard\"}</h2>\n                <div className=\"wrapper-users\">\n                    <div className=\"container\">\n                        <table className=\"table table-bordered\">\n                            <thead className=\"thead-dark\">\n                            <tr>\n                                <th> </th>\n                                <td>Name</td>\n                                {/*<td>logged</td>*/}\n                                <td>Best Score</td>\n                                <td>Last seen</td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {this.dataTable()}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                {this.props.numCorrectAnswers === parseInt(this.props.amountOfQuestions) ?\n                    <div className=\"perfect\">\n                        <img src={`${window.location.origin}/${config.perfectGif}`} alt={\"Perfect gif\"} />\n\n                    <p> {\"You answered all the questions correctly!\"}</p>\n                    </div>\n                    :\n                    <p className=\"resultsNumbers\">You got {this.props.numCorrectAnswers} correct answers out of {parseInt( this.props.amountOfQuestions)}!</p>\n\n                }\n\n                <p><u>Yore score:</u> <b>{this.props.score}</b></p>\n\n                <ButtonGroup  variant=\"contained\" aria-label=\"outlined primary button group\">\n\n                    <button\n                        className=\"startOver\"\n                        onClick={this.props.reset}\n                    >\n                        {\"Start Over\"}\n                    </button>\n                    &nbsp;&nbsp;&nbsp;{/*Space between the buttons*/}\n                    <button\n                        className=\"startOver\"\n                        onClick={this.props.endGame}\n                    >\n                        {\"End Game\"}\n                    </button>\n                </ButtonGroup>\n            </div>\n        )\n    }\n}\n\nexport default QuizFinish;\n\n\n\n","import React from 'react';\r\nimport swal from 'sweetalert';\r\nimport config from '../../../config.json';\r\nimport './MainMenu.css';\r\nimport HighScoreTable from '../HighScoreTable/HighScoreTable'\r\n\r\nconst axios = require('axios');\r\n\r\n\r\n\r\nclass MainMenu extends React.Component {\r\n    constructor(props) {\r\n        console.log(\"MainMenu c-tor\")\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            usersCollection: []\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    dataTable() {\r\n        return this.state.usersCollection.map((data, i) => {\r\n            return <HighScoreTable obj={data} key={i}  />;\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        axios.get('http://localhost:2000/showAll')\r\n            .then(res => {\r\n                this.setState({ usersCollection: res.data });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    register = (e) => {\r\n        e.preventDefault()\r\n\r\n        axios.post('http://localhost:2000/register', {\r\n            username: this.props.playerName,\r\n        })\r\n            .then((res) => {\r\n                // swal({\r\n                //         text: res.data.title,\r\n                //         icon: \"success\",\r\n                //         timer: 500,\r\n                //     },\r\n                // );\r\n                // this.props.history.push('/');\r\n                this.props.handleNameSubmission()\r\n            })\r\n            .catch((err) => {\r\n                if (err.response && err.response.data && err.response.data.errorMessage) {\r\n                    swal({\r\n                        dangerMode: true,\r\n                        text: err.response.data.errorMessage,\r\n                        icon: \"error\",\r\n                    })\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render MainMenu\")\r\n        return (\r\n            <div>\r\n\r\n                <h1>{config.title}</h1>\r\n                <img className=\"quizLogo\" src={`${window.location.origin}/${config.quizLogo}`} alt={`${config.title} logo`} />\r\n                <h2 style={{ color: config.titleColor, margin:5}}>Welcome</h2>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-5\">\r\n                        Please enter your name:\r\n                    </div>\r\n                    <div className=\"username input col-7\">\r\n                        {/*<Form>*/}\r\n                            <div className = \"mb-4\">\r\n                                <input\r\n                                    // size=\"5\"\r\n                                    type=\"text\"\r\n                                    name=\"username\"\r\n                                    // value={this.props.playerName}\r\n\r\n                                    onChange={this.props.setPlayerName}\r\n                                    placeholder=\"s\"\r\n                                />\r\n                                {/*<FormControl.Feedback type=\"invalid\">*/}\r\n                                {/*</FormControl.Feedback>*/}\r\n                            </div>\r\n                        {/*</Form>*/}\r\n                    </div>\r\n                </div>\r\n\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"rainbow rainbow-1\"\r\n                    disabled={this.props.playerName === ''}\r\n                    onClick={this.register}\r\n                    // onClick={this.props.handleNameSubmission }\r\n                >\r\n                    Continue\r\n                </button>\r\n\r\n                <div className=\"wrapper-users\">\r\n                    <div className=\"container\">\r\n                        <table className=\"table table-bordered\">\r\n                            <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th> </th>\r\n                                <td>Name</td>\r\n                                {/*<td>logged</td>*/}\r\n                                <td>Best Score</td>\r\n                                <td>Last seen</td>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.dataTable()}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MainMenu;\r\n","import React from 'react';\n\nimport QuizEntry from './QuizEntry/QuizEntry';\nimport QuizQuestion from './QuizQuestion/QuizQuestion';\nimport QuizFinish from './QuizFinish/QuizFinish';\nimport './Quiz.css';\nimport MainMenu from \"./Menus/MainMenu\";\nimport axios from \"axios\";\n\n\n\nclass Quiz extends React.Component {\n\n    constructor(props) {\n        console.log(\"constructor app\")\n\n        super(props);\n        axios.post('http://localhost:2000/logOutEveryOne', {})\n    }\n\n  renderQuizDisplay = () => {\n    // console.log(\"render QuizDisplay\")\n    if (this.props.page === -1) {//Main Menu\n      return (\n          <MainMenu\n              handleNameSubmission={this.props.handleNameSubmission}\n              setPlayerName={this.props.setPlayerName}\n              playerName={this.props.playerName}\n          />\n      )\n    }\n\n    else if (this.props.page === 0) {//Quiz entry\n\n      return <QuizEntry\n          handlePageNext={this.props.handlePageNext}\n          gameQuestionsType={this.props.gameQuestionsType}\n          handleTypeChange={this.props.handleTypeChange}\n          handleQuestionsAmountChange={this.props.handleQuestionsAmountChange}\n          handleDifficultyChange={this.props.handleDifficultyChange}\n          playerName={this.props.playerName}\n          difficulty={this.props.difficulty}\n          amountOfQuestions={this.props.amountOfQuestions}\n      />\n    }\n    //Ask questions as the amount of questions defined at the beginning.\n    else if ( this.props.qNum !== (Number(this.props.amountOfQuestions)+1))\n    {\n      return (\n          <QuizQuestion\n              page={this.props.page}\n              qNum={this.props.qNum}\n              handlePageNext={this.props.handlePageNext}\n              numCorrectAnswers={this.props.numCorrectAnswers}\n              numIncorrectAnswers={this.props.numIncorrectAnswers}\n              handleAnswer={this.props.handleAnswer}\n              handleAnswerSubmission={this.props.handleAnswerSubmission}\n              score={this.props.score}\n              gameQuestionsType={this.props.gameQuestionsType}\n              amountOfQuestions={this.props.amountOfQuestions}\n              difficulty={this.props.difficulty}\n\n              // isActive={this.props.isActive}\n              secondsElapsed={this.props.secondsElapsed}\n\n              startTime={this.props.startTime}\n              resetTime={this.props.resetTime}\n              pauseTime={this.props.pauseTime}\n              getSeconds={this.props.getSeconds}\n          />\n      )\n    }\n    else {\n        //No more questions to ask.\n      return <QuizFinish\n          numCorrectAnswers={this.props.numCorrectAnswers}\n          reset={this.props.reset}\n          endGame={this.props.endGame}\n          score={this.props.score}\n          amountOfQuestions={this.props.amountOfQuestions}\n          playerName={this.props.playerName}\n      />\n    }\n  }\n  render() {\n    // console.log(\"render quiz\")\n    return (\n        <div className=\"container-fluid quizContainer\" style={{ backgroundImage: `url('texture.png')`}}>\n          {this.renderQuizDisplay()}\n        </div>\n    );\n  }\n}\nexport default Quiz;\n","import React from 'react';\nimport { backgroundImage } from '../../config.json';\nimport flagQuestion, {  questions } from '../../flagQuestions.json';\nimport Quiz from '../quiz/Quiz';\nimport './App.css';\nimport axios from \"axios\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    console.log(\"constructor app\")\n    super(props);\n    this.state = {\n      page: -1,//Current question page.\n      numCorrectAnswers: 0,\n      numIncorrectAnswers: 0,\n      qNum: 0,//Current question number.\n      score: 0,//Current player score.\n      playerName:\"s\",\n      difficulty:\"3\",\n      amountOfQuestions:\"5\",\n      gameQuestionsType:\"country\",\n\n      // isActive: false,\n      secondsElapsed: 45 //time in seconds\n\n    }\n  }\n\n//Get the current second.\n  getSeconds() {\n    if (this.secondsElapsed  >= 0) {\n      return ((\"\" + (this.secondsElapsed )).slice(-2));\n    }\n    else {//Times is up, stop the timer by setting it to 0.\n      return \"0\"\n    }\n  }\n  //Start the countdown timer.\n  startTime = () => {\n    // this.setState({ isActive: true });\n\n    this.countdown = setInterval(() => {\n      this.setState(({ secondsElapsed }) => ({\n        secondsElapsed: secondsElapsed - 1\n      }));\n    }, 1000);\n  };\n//Reset the countdown timer.\n  resetTime = () => {\n    clearInterval(this.countdown);\n    this.setState({\n      secondsElapsed: 45,\n      // isActive: false\n    });\n  };\n//Pause the countdown timer.\n  pauseTime = () => {\n    // console.log(\"secondsElapsed: \",this.state.secondsElapsed % 60)\n    clearInterval(this.countdown);\n    // this.setState({ isActive: false });\n  };\n\n  setPlayerName = (e) => {\n    this.setState({\n      playerName: e.target.value\n    }) ;\n  }\n  handleDifficultyChange=(e)=> {\n    this.setState({\n      difficulty : e.target.value,\n\n    })\n\n  }\n  handleQuestionsAmountChange=(e)=> {\n    this.setState({\n      amountOfQuestions : e.target.value\n    })\n  }\n  handleTypeChange=(e)=> {\n    this.setState({\n      gameQuestionsType:e.target.value\n    })\n  }\n  handleNameSubmission = () => {\n    console.log(\"handleNameSubmission app\")\n    this.setState({\n      page: this.state.page + 1\n    })\n  }\n  handlePageNext = () => {\n    this.resetTime()\n    console.log(\"handlePageNext app\")\n    let min = 1;\n    let max = Number(flagQuestion.questions.length)//Maximum questions amount.\n    if (this.state.qNum < Number (this.state.amountOfQuestions )+1) {\n      this.setState({\n        page: Number(Math.floor(Math.random() * (max - min) + min)),\n        qNum: this.state.qNum + 1\n      })\n    }\n  }\n\n  handleAnswerSubmission = (validAnswer,clueButtonPenalty,currentTime) => {\n    console.log(\"handleAnswerSubmission app\");\n    // A correct answer score is calculated based on the difficulty of the game\n    // and the time it took for the user to answer the question and will be rounded to have a round score.\n    // If the hint was used the score would be cut in half.\n    let currentScore = Math.round(((10 * this.state.difficulty / 2 ) + currentTime) * clueButtonPenalty)\n    if (validAnswer){\n      this.setState((prevState) => ({\n        numCorrectAnswers: prevState.numCorrectAnswers + 1,\n        score:prevState.score += currentScore\n      }));\n    }\n    else this.setState({ numIncorrectAnswers: this.state.numIncorrectAnswers + 1 })\n  }\n\n  reset = () => {\n    console.log(\"reset app\")\n    this.setState({\n      page: 0,\n      numCorrectAnswers: 0,\n      numIncorrectAnswers: 0,\n      qNum:0,\n      score:0,\n    });\n  }\n\n  endGame = () => {\n    console.log(\"endGame app\")\n    this.setState({\n      page: -1,\n      numCorrectAnswers: 0,\n      numIncorrectAnswers: 0,\n      qNum:0,\n      score:0\n    });\n    axios.post('http://localhost:2000/logOut', {})\n  }\n\n  render() {\n    // console.log(\"render app\")\n    return (\n        <div className=\"App\" style={{ backgroundImage: `url('${window.location.origin}/${backgroundImage}')`}}>\n          <Quiz\n              page={this.state.page}\n              qNum={this.state.qNum}\n              score={this.state.score}\n              playerName={this.state.playerName}\n              difficulty={this.state.difficulty}\n              amountOfQuestions={this.state.amountOfQuestions}\n              gameQuestionsType={this.state.gameQuestionsType}\n              numCorrectAnswers={this.state.numCorrectAnswers}\n              numIncorrectAnswers={this.state.numIncorrectAnswers}\n              handleAnswer={this.handleAnswer}\n              setPlayerName={this.setPlayerName}\n              handleDifficultyChange={this.handleDifficultyChange}\n              handleQuestionsAmountChange={this.handleQuestionsAmountChange}\n              handleTypeChange={this.handleTypeChange}\n              handlePageNext={this.handlePageNext}\n              handleAnswerSubmission={this.handleAnswerSubmission}\n              reset={this.reset}\n              endGame={this.endGame}\n              randomAnswers = {this.createRandomAnswers}\n              handleNameSubmission={this.handleNameSubmission}\n              questions={questions}\n\n              // isActive={this.state.isActive}\n              secondsElapsed={this.state.secondsElapsed}\n\n              startTime={this.startTime}\n              resetTime={this.resetTime}\n              pauseTime={this.pauseTime}\n              getSeconds={this.getSeconds}\n\n          />\n        </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}